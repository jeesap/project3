version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=`curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if(( ${SUCCESS}==1 ));
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm i
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          channel: C01KSJ6CHHU
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          channel: C01KSJ6CHHU
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            npm run test
      - slack/notify:
          event: fail
          channel: C01KSJ6CHHU
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
             cd backend
             npm i
             npm run test
      - slack/notify:
          event: fail
          channel: C01KSJ6CHHU
          template: basic_fail_1
             
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          channel: C01KSJ6CHHU
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
             cd backend
             npm i
             npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          channel: C01KSJ6CHHU
          template: basic_fail_1
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run: 
          name: Store Backend URL in Memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND IP:"
            echo ${BACKEND_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
               --request PUT \
               --data ${BACKEND_IP} https://api.memstash.io/values/backendip
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum install tar -y
            yum install gzip -y 
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            cd .circleci/ansible/
            echo "[web]" > ./inventory.txt
            echo ${BACKEND_IP} >> ./inventory.txt
            cat ./inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}        
     
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - c5:de:4a:2b:2b:dc:7a:f8:45:ff:88:a9:3e:9f:2d:c9
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID}"
            if grep "has been executed successfully" backend/migrations_log.txt;
            then curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}; \
            fi
     # Here's where you will add some code to rollback on failure
      - revert-migrations
  
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
